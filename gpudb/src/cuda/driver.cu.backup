/* This file is generated by code_gen.py */
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <string.h>
#include <unistd.h>
#include <malloc.h>
#include <time.h>
#include <getopt.h>
#include <linux/limits.h>
#include "../include/common.h"
#include "../include/hashJoin.h"
#include "../include/schema.h"
#include "../include/cpuCudaLib.h"
#include "../include/gpuCudaLib.h"
extern struct tableNode* tableScan(struct scanNode *,struct statistic *);
extern struct tableNode* hashJoin(struct joinNode *, struct statistic *);
extern struct tableNode* groupBy(struct groupByNode *,struct statistic *);
extern struct tableNode* orderBy(struct orderByNode *, struct statistic *);
extern void materializeCol(struct materializeNode * mn, struct statistic *);
#define CHECK_POINTER(p) do {\
	if(p == NULL){   \
		perror("Failed to allocate host memory");    \
		exit(-1);      \
	}} while(0)
int main(int argc, char ** argv){
	struct timeval t;
/* For initializing CUDA device */
	int * cudaTmp;
	cudaMalloc((void**)&cudaTmp,sizeof(int));
	cudaFree(cudaTmp);

	gettimeofday(&t, NULL);
	printf("{+++} %lf BEGIN 1\n", t.tv_sec + t.tv_usec / 1000000.0);
	int table;
	int long_index;
	char path[PATH_MAX];
	int setPath = 0;
	struct option long_options[] = {
		{"datadir",required_argument,0,'0'}
	};

	while((table=getopt_long(argc,argv,"",long_options,&long_index))!=-1){
		switch(table){
			case '0':
				setPath = 1;
				strcpy(path,optarg);
				break;
		}
	}

	if(setPath == 1)
		chdir(path);

	struct timespec start,end;
	struct timespec diskStart, diskEnd;
	double diskTotal = 0;
	clock_gettime(CLOCK_REALTIME,&start);
	struct statistic pp;
	pp.total = pp.kernel = pp.pcie = 0;
	struct tableNode *result = (struct tableNode*) malloc(sizeof(struct tableNode));
	CHECK_POINTER(result);
	initTable(result);
	struct tableNode *ddateTable;
	int outFd;
	long outSize;
	char *outTable;
	long offset, tupleOffset;
	int blockTotal;
	struct columnHeader header;

	outFd = open("DDATE0",O_RDONLY);
	read(outFd,&header, sizeof(struct columnHeader));
	blockTotal = header.blockTotal;
	close(outFd);
	offset=0;
	tupleOffset=0;
	struct tableNode *ddateRes = (struct tableNode *)malloc(sizeof(struct tableNode));
	CHECK_POINTER(ddateRes);
	initTable(ddateRes);
	for(int i=0;i<blockTotal;i++){
		ddateTable = (struct tableNode *) malloc(sizeof(struct tableNode));
		CHECK_POINTER(ddateTable);
		ddateTable->totalAttr = 2;
		ddateTable->attrType = (int *) malloc(sizeof(int)*2);
		CHECK_POINTER(ddateTable->attrType);
		ddateTable->attrSize = (int *) malloc(sizeof(int)*2);
		CHECK_POINTER(ddateTable->attrSize);
		ddateTable->attrIndex = (int *) malloc(sizeof(int)*2);
		CHECK_POINTER(ddateTable->attrIndex);
		ddateTable->attrTotalSize = (int *) malloc(sizeof(int)*2);
		CHECK_POINTER(ddateTable->attrTotalSize);
		ddateTable->dataPos = (int *) malloc(sizeof(int)*2);
		CHECK_POINTER(ddateTable->dataPos);
		ddateTable->dataFormat = (int *) malloc(sizeof(int)*2);
		CHECK_POINTER(ddateTable->dataFormat);
		ddateTable->content = (char **) malloc(sizeof(char *)*2);
		CHECK_POINTER(ddateTable->content);
		ddateTable->attrSize[0] = sizeof(int);
		ddateTable->attrIndex[0] = 0;
		ddateTable->attrType[0] = INT;
		ddateTable->dataPos[0] = MEM;
		outFd = open("DDATE0",O_RDONLY);
		offset = i * sizeof(struct columnHeader) + tupleOffset *sizeof(int);
		lseek(outFd,offset,SEEK_SET);
		read(outFd,&header, sizeof(struct columnHeader));
		offset += sizeof(struct columnHeader);
		ddateTable->dataFormat[0] = header.format;
		outSize = header.tupleNum * sizeof(int);
		ddateTable->attrTotalSize[0] = outSize;
		clock_gettime(CLOCK_REALTIME,&diskStart);
		outTable =(char *) mmap(0,outSize,PROT_READ,MAP_SHARED,outFd,offset);

		ddateTable->content[0] = (char *)memalign(256,outSize);
		memcpy(ddateTable->content[0],outTable,outSize);
		munmap(outTable,outSize);
		clock_gettime(CLOCK_REALTIME,&diskEnd);
		diskTotal += (diskEnd.tv_sec -  diskStart.tv_sec)* BILLION + diskEnd.tv_nsec - diskStart.tv_nsec;
		close(outFd);
		ddateTable->attrSize[1] = sizeof(int);
		ddateTable->attrIndex[1] = 4;
		ddateTable->attrType[1] = INT;
		ddateTable->dataPos[1] = MEM;
		outFd = open("DDATE4",O_RDONLY);
		offset = i * sizeof(struct columnHeader) + tupleOffset *sizeof(int);
		lseek(outFd,offset,SEEK_SET);
		read(outFd,&header, sizeof(struct columnHeader));
		offset += sizeof(struct columnHeader);
		ddateTable->dataFormat[1] = header.format;
		outSize = header.tupleNum * sizeof(int);
		ddateTable->attrTotalSize[1] = outSize;
		clock_gettime(CLOCK_REALTIME,&diskStart);
		outTable =(char *) mmap(0,outSize,PROT_READ,MAP_SHARED,outFd,offset);

		ddateTable->content[1] = (char *)memalign(256,outSize);
		memcpy(ddateTable->content[1],outTable,outSize);
		munmap(outTable,outSize);
		clock_gettime(CLOCK_REALTIME,&diskEnd);
		diskTotal += (diskEnd.tv_sec -  diskStart.tv_sec)* BILLION + diskEnd.tv_nsec - diskStart.tv_nsec;
		close(outFd);
		ddateTable->tupleSize = 0 + sizeof(int) + sizeof(int) + sizeof(int);

		ddateTable->tupleNum = header.tupleNum;
		struct scanNode ddateRel;
		ddateRel.tn = ddateTable;
		ddateRel.hasWhere = 1;
		ddateRel.whereAttrNum = 1;
		ddateRel.whereIndex = (int *)malloc(sizeof(int)*1);
		CHECK_POINTER(ddateRel.whereIndex);
		ddateRel.outputNum = 1;
		ddateRel.outputIndex = (int *)malloc(sizeof(int) * 1);
		CHECK_POINTER(ddateRel.outputIndex);
		ddateRel.outputIndex[0] = 0;
		ddateRel.whereIndex[0] = 1;
		ddateRel.keepInGpu = 1;
		ddateRel.filter = (struct whereCondition *)malloc(sizeof(struct whereCondition));
		CHECK_POINTER(ddateRel.filter);
		(ddateRel.filter)->nested = 0;
		(ddateRel.filter)->expNum = 1;
		(ddateRel.filter)->exp = (struct whereExp*) malloc(sizeof(struct whereExp) *1);
		CHECK_POINTER((ddateRel.filter)->exp);
		(ddateRel.filter)->andOr = EXP;
		(ddateRel.filter)->exp[0].index = 0;
		(ddateRel.filter)->exp[0].relation = EQ;
		{
			int tmp = 1993;
			memcpy((ddateRel.filter)->exp[0].content, &tmp,sizeof(int));
		}
		struct tableNode *tmp = tableScan(&ddateRel, &pp);
		gettimeofday(&t, NULL);
		printf("{+++} %lf after tableScan 1\n", t.tv_sec + t.tv_usec / 1000000.0);
		if(blockTotal !=1){
			mergeIntoTable(ddateRes,tmp,&pp);
		}else{
			free(ddateRes);
			ddateRes = tmp;
		}
		clock_gettime(CLOCK_REALTIME,&diskStart);
		freeScan(&ddateRel);

		clock_gettime(CLOCK_REALTIME,&diskEnd);
		diskTotal += (diskEnd.tv_sec -  diskStart.tv_sec)* BILLION + diskEnd.tv_nsec - diskStart.tv_nsec;
		tupleOffset += header.tupleNum;

	}

	gettimeofday(&t, NULL);
	printf("{+++} %lf before output io\n", t.tv_sec + t.tv_usec / 1000000.0);
	outFd = open("LINEORDER9",O_RDONLY);
	read(outFd, &header, sizeof(struct columnHeader));
	blockTotal = header.blockTotal;
	close(outFd);
	offset = 0;
	long blockSize[4];
	for(int i=0;i<4;i++)
		blockSize[i] = 0;
	for(int i=0;i<blockTotal;i++){

		struct tableNode *lineorderTable = (struct tableNode*)malloc(sizeof(struct tableNode));
		CHECK_POINTER(lineorderTable);
		lineorderTable->totalAttr = 4;
		lineorderTable->attrType = (int *) malloc(sizeof(int)*4);
		CHECK_POINTER(lineorderTable->attrType);
		lineorderTable->attrSize = (int *) malloc(sizeof(int)*4);
		CHECK_POINTER(lineorderTable->attrSize);
		lineorderTable->attrIndex = (int *) malloc(sizeof(int)*4);
		CHECK_POINTER(lineorderTable->attrIndex);
		lineorderTable->attrTotalSize = (int *) malloc(sizeof(int)*4);
		CHECK_POINTER(lineorderTable->attrTotalSize);
		lineorderTable->dataPos = (int *) malloc(sizeof(int)*4);
		CHECK_POINTER(lineorderTable->dataPos);
		lineorderTable->dataFormat = (int *) malloc(sizeof(int)*4);
		CHECK_POINTER(lineorderTable->dataFormat);
		lineorderTable->content = (char **) malloc(sizeof(char *)*4);
		CHECK_POINTER(lineorderTable->content);
		lineorderTable->attrType[0] = INT;
		lineorderTable->attrSize[0] = sizeof(int);
		lineorderTable->attrIndex[0] = 9;
		lineorderTable->dataPos[0] = MEM;
		outFd = open("LINEORDER9", O_RDONLY);
		offset = i*sizeof(struct columnHeader) + blockSize[0];
		lseek(outFd,offset,SEEK_SET);
		read(outFd, &header, sizeof(struct columnHeader));
		blockSize[0] += header.blockSize;
		offset += sizeof(struct columnHeader);
		lineorderTable->dataFormat[0] = header.format;
		outSize = header.blockSize;
		clock_gettime(CLOCK_REALTIME,&diskStart);
		outTable = (char *)mmap(0,outSize,PROT_READ,MAP_SHARED,outFd,offset);
		lineorderTable->content[0] = (char *)malloc(outSize);

		CHECK_POINTER(lineorderTable->content[0]);
		memcpy(lineorderTable->content[0],outTable,outSize);
		munmap(outTable,outSize);
		clock_gettime(CLOCK_REALTIME,&diskEnd);
		diskTotal += (diskEnd.tv_sec -  diskStart.tv_sec)* BILLION + diskEnd.tv_nsec - diskStart.tv_nsec;
		close(outFd);
		lineorderTable->attrTotalSize[0] = outSize;
		lineorderTable->attrType[1] = INT;
		lineorderTable->attrSize[1] = sizeof(int);
		lineorderTable->attrIndex[1] = 11;
		lineorderTable->dataPos[1] = MEM;
		outFd = open("LINEORDER11", O_RDONLY);
		offset = i*sizeof(struct columnHeader) + blockSize[1];
		lseek(outFd,offset,SEEK_SET);
		read(outFd, &header, sizeof(struct columnHeader));
		blockSize[1] += header.blockSize;
		offset += sizeof(struct columnHeader);
		lineorderTable->dataFormat[1] = header.format;
		outSize = header.blockSize;
		clock_gettime(CLOCK_REALTIME,&diskStart);
		outTable = (char *)mmap(0,outSize,PROT_READ,MAP_SHARED,outFd,offset);
		lineorderTable->content[1] = (char *)malloc(outSize);

		CHECK_POINTER(lineorderTable->content[1]);
		memcpy(lineorderTable->content[1],outTable,outSize);
		munmap(outTable,outSize);
		clock_gettime(CLOCK_REALTIME,&diskEnd);
		diskTotal += (diskEnd.tv_sec -  diskStart.tv_sec)* BILLION + diskEnd.tv_nsec - diskStart.tv_nsec;
		close(outFd);
		lineorderTable->attrTotalSize[1] = outSize;
		lineorderTable->attrType[2] = INT;
		lineorderTable->attrSize[2] = sizeof(int);
		lineorderTable->attrIndex[2] = 5;
		lineorderTable->dataPos[2] = MEM;
		outFd = open("LINEORDER5", O_RDONLY);
		offset = i*sizeof(struct columnHeader) + blockSize[2];
		lseek(outFd,offset,SEEK_SET);
		read(outFd, &header, sizeof(struct columnHeader));
		blockSize[2] += header.blockSize;
		offset += sizeof(struct columnHeader);
		lineorderTable->dataFormat[2] = header.format;
		outSize = header.blockSize;
		clock_gettime(CLOCK_REALTIME,&diskStart);
		outTable = (char *)mmap(0,outSize,PROT_READ,MAP_SHARED,outFd,offset);
		lineorderTable->content[2] = (char *)malloc(outSize);

		CHECK_POINTER(lineorderTable->content[2]);
		memcpy(lineorderTable->content[2],outTable,outSize);
		munmap(outTable,outSize);
		clock_gettime(CLOCK_REALTIME,&diskEnd);
		diskTotal += (diskEnd.tv_sec -  diskStart.tv_sec)* BILLION + diskEnd.tv_nsec - diskStart.tv_nsec;
		close(outFd);
		lineorderTable->attrTotalSize[2] = outSize;
		lineorderTable->attrType[3] = INT;
		lineorderTable->attrSize[3] = sizeof(int);
		lineorderTable->attrIndex[3] = 8;
		lineorderTable->dataPos[3] = MEM;
		outFd = open("LINEORDER8", O_RDONLY);
		offset = i*sizeof(struct columnHeader) + blockSize[3];
		lseek(outFd,offset,SEEK_SET);
		read(outFd, &header, sizeof(struct columnHeader));
		blockSize[3] += header.blockSize;
		offset += sizeof(struct columnHeader);
		lineorderTable->dataFormat[3] = header.format;
		outSize = header.blockSize;
		clock_gettime(CLOCK_REALTIME,&diskStart);
		outTable = (char *)mmap(0,outSize,PROT_READ,MAP_SHARED,outFd,offset);
		lineorderTable->content[3] = (char *)malloc(outSize);

		CHECK_POINTER(lineorderTable->content[3]);
		memcpy(lineorderTable->content[3],outTable,outSize);
		munmap(outTable,outSize);
		clock_gettime(CLOCK_REALTIME,&diskEnd);
		diskTotal += (diskEnd.tv_sec -  diskStart.tv_sec)* BILLION + diskEnd.tv_nsec - diskStart.tv_nsec;
		close(outFd);
		lineorderTable->attrTotalSize[3] = outSize;
		lineorderTable->tupleSize = 0 + sizeof(int) + sizeof(int) + sizeof(int) + sizeof(int);

		lineorderTable->tupleNum = header.tupleNum;
		struct scanNode lineorderRel;
		lineorderRel.tn = lineorderTable;
		lineorderRel.hasWhere = 1;
		lineorderRel.whereAttrNum = 2;
		lineorderRel.outputNum = 3;
		lineorderRel.whereIndex = (int *)malloc(sizeof(int)*2);
		CHECK_POINTER(lineorderRel.whereIndex);
		lineorderRel.outputIndex = (int *)malloc(sizeof(int)*3);
		CHECK_POINTER(lineorderRel.outputIndex);
		lineorderRel.whereIndex[0] = 1;
		lineorderRel.whereIndex[1] = 3;
		lineorderRel.outputIndex[0 ] = 0;
		lineorderRel.outputIndex[1 ] = 1;
		lineorderRel.outputIndex[2 ] = 2;
		lineorderRel.keepInGpu = 1;
		lineorderRel.filter = (struct whereCondition *)malloc(sizeof(struct whereCondition));
		CHECK_POINTER(lineorderRel.filter);
		(lineorderRel.filter)->nested = 0;
		(lineorderRel.filter)->expNum = 3;
		(lineorderRel.filter)->exp = (struct whereExp*) malloc(sizeof(struct whereExp) *3);
		CHECK_POINTER((lineorderRel.filter)->exp);
		(lineorderRel.filter)->andOr = AND;
		(lineorderRel.filter)->exp[0].index = 0;
		(lineorderRel.filter)->exp[0].relation = GEQ;
		{
			int tmp = 1;
			memcpy((lineorderRel.filter)->exp[0].content, &tmp,sizeof(int));
		}
		(lineorderRel.filter)->exp[1].index = 0;
		(lineorderRel.filter)->exp[1].relation = LEQ;
		{
			int tmp = 3;
			memcpy((lineorderRel.filter)->exp[1].content, &tmp,sizeof(int));
		}
		(lineorderRel.filter)->exp[2].index = 1;
		(lineorderRel.filter)->exp[2].relation = LTH;
		{
			int tmp = 25;
			memcpy((lineorderRel.filter)->exp[2].content, &tmp,sizeof(int));
		}
		gettimeofday(&t, NULL);
		printf("{+++} %lf before tableScan 2\n", t.tv_sec + t.tv_usec / 1000000.0);
		struct tableNode * lineorderRes = tableScan(&lineorderRel, &pp);
		clock_gettime(CLOCK_REALTIME,&diskStart);
		freeScan(&lineorderRel);

		clock_gettime(CLOCK_REALTIME,&diskEnd);
		diskTotal += (diskEnd.tv_sec -  diskStart.tv_sec)* BILLION + diskEnd.tv_nsec - diskStart.tv_nsec;
		struct joinNode jNode0;
		jNode0.leftTable = lineorderRes;
		jNode0.rightTable = ddateRes;
		jNode0.totalAttr = 2;
		jNode0.keepInGpu = (int *) malloc(sizeof(int) * 2);
		CHECK_POINTER(jNode0.keepInGpu);
		for(int k=0;k<2;k++)
			jNode0.keepInGpu[k] = 1;
		jNode0.rightOutputAttrNum = 0;
		jNode0.leftOutputAttrNum = 2;
		jNode0.leftOutputAttrType = (int *)malloc(sizeof(int)*2);
		CHECK_POINTER(jNode0.leftOutputAttrType);
		jNode0.leftOutputIndex = (int *)malloc(sizeof(int)*2);
		CHECK_POINTER(jNode0.leftOutputIndex);
		jNode0.leftPos = (int *)malloc(sizeof(int)*2);
		CHECK_POINTER(jNode0.leftPos);
		jNode0.tupleSize = 0;
		jNode0.leftOutputIndex[0] = 0;
		jNode0.leftOutputAttrType[0] = INT;
		jNode0.leftPos[0] = 0;
		jNode0.tupleSize += lineorderRes->attrSize[0];
		jNode0.leftOutputIndex[1] = 1;
		jNode0.leftOutputAttrType[1] = INT;
		jNode0.leftPos[1] = 1;
		jNode0.tupleSize += lineorderRes->attrSize[1];
		jNode0.rightOutputAttrType = (int *)malloc(sizeof(int)*0);
		CHECK_POINTER(jNode0.rightOutputAttrType);
		jNode0.rightOutputIndex = (int *)malloc(sizeof(int)*0);
		CHECK_POINTER(jNode0.rightOutputIndex);
		jNode0.rightPos = (int *)malloc(sizeof(int)*0);
		CHECK_POINTER(jNode0.rightPos);
		jNode0.rightKeyIndex = 0;
		jNode0.leftKeyIndex = 2;
		struct tableNode *join0 = hashJoin(&jNode0,&pp);

		if(blockTotal !=1){
			mergeIntoTable(result,join0, &pp);
			clock_gettime(CLOCK_REALTIME,&diskStart);
			freeTable(join0);
			clock_gettime(CLOCK_REALTIME,&diskEnd);
			diskTotal += (diskEnd.tv_sec -  diskStart.tv_sec)* BILLION + diskEnd.tv_nsec - diskStart.tv_nsec;
		}else{
			clock_gettime(CLOCK_REALTIME,&diskStart);
			freeTable(result);
			result = join0;
			clock_gettime(CLOCK_REALTIME,&diskEnd);
			diskTotal += (diskEnd.tv_sec -  diskStart.tv_sec)* BILLION + diskEnd.tv_nsec - diskStart.tv_nsec;
		}
	}

	struct groupByNode * gbNode = (struct groupByNode *) malloc(sizeof(struct groupByNode));
	CHECK_POINTER(gbNode);
	gbNode->table = result;
	gbNode->groupByColNum = 1;
	gbNode->groupByIndex = (int *)malloc(sizeof(int) * 1);
	CHECK_POINTER(gbNode->groupByIndex);
	gbNode->groupByType = (int *)malloc(sizeof(int) * 1);
	CHECK_POINTER(gbNode->groupByType);
	gbNode->groupBySize = (int *)malloc(sizeof(int) * 1);
	CHECK_POINTER(gbNode->groupBySize);
	gbNode->groupByIndex[0] = -1;
	gbNode->groupByType[0] = INT;
	gbNode->groupBySize[0] = sizeof(int);
	gbNode->outputAttrNum = 1;
	gbNode->attrType = (int *) malloc(sizeof(int) *1);
	CHECK_POINTER(gbNode->attrType);
	gbNode->attrSize = (int *) malloc(sizeof(int) *1);
	CHECK_POINTER(gbNode->attrSize);
	gbNode->tupleSize = 0;
	gbNode->gbExp = (struct groupByExp *) malloc(sizeof(struct groupByExp) * 1);
	CHECK_POINTER(gbNode->gbExp);
	gbNode->tupleSize += sizeof(float);
	gbNode->attrType[0] = FLOAT;
	gbNode->attrSize[0] = sizeof(float);
	gbNode->gbExp[0].func = SUM;
	gbNode->gbExp[0].exp.op = MULTIPLY;
	gbNode->gbExp[0].exp.opNum = 2;
	gbNode->gbExp[0].exp.exp = (long) malloc(sizeof(struct mathExp) * 2);
((struct mathExp *)	gbNode->gbExp[0].exp.exp)[0].op = NOOP;
((struct mathExp *)	gbNode->gbExp[0].exp.exp)[0].opNum = 1;
((struct mathExp *)	gbNode->gbExp[0].exp.exp)[0].exp = 0;
((struct mathExp *)	gbNode->gbExp[0].exp.exp)[0].opType = COLUMN;
((struct mathExp *)	gbNode->gbExp[0].exp.exp)[0].opValue = 0;
((struct mathExp *)	gbNode->gbExp[0].exp.exp)[1].op = NOOP;
((struct mathExp *)	gbNode->gbExp[0].exp.exp)[1].opNum = 1;
((struct mathExp *)	gbNode->gbExp[0].exp.exp)[1].exp = 0;
((struct mathExp *)	gbNode->gbExp[0].exp.exp)[1].opType = COLUMN;
((struct mathExp *)	gbNode->gbExp[0].exp.exp)[1].opValue = 1;
	struct tableNode * gbResult = groupBy(gbNode, &pp);
	freeGroupByNode(gbNode);

	struct materializeNode mn;
	mn.table = gbResult;
	materializeCol(&mn, &pp);
	freeTable(gbResult);

	clock_gettime(CLOCK_REALTIME,&end);
	double timeE = (end.tv_sec -  start.tv_sec)* BILLION + end.tv_nsec - start.tv_nsec;
	printf("Disk Load Time: %lf\n", diskTotal/(1000*1000));
	printf("PCIe Time: %lf\n",pp.pcie);
	printf("Kernel Time: %lf\n",pp.kernel);
	printf("Total Time: %lf\n", timeE/(1000*1000));
}

